---
# tasks file for peertube

- name: install packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - curl
    - sudo
    - unzip
    - vim

- name: create dir for app user {{ app_user }}
  file: 
    path: "{{ app_user_home | dirname }}"
    recurse: yes
    state: directory

- name: create app user {{ app_user }}
  user: 
    name: "{{ app_user }}"
    comment: "For app {{ app_user }}"
    groups: sudo
    password: "{{ app_user_password }}"
    update_password: on_create
    home: "{{ app_user_home }}"
    createhome: yes
    shell: "{{ app_user_shell }}"

- name: install yarn gpg key for repository
  apt_key:
    url: "{{ yarn_gpg_url }}"
    state: present

- name: set up yarn repository
  lineinfile:
    line: "{{ yarn_repo_line }}"
    path: "{{ yarn_repo_file }}"
    mode: 0644
    owner: root
    group: root
    create: yes

- name: install yarn package
  apt:
    update_cache: yes
    name: yarn
    state: present

- name: install remaining packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nginx
    - ffmpeg
    - postgresql
    - postgresql-contrib
    - openssl
    - g++
    - make
    - redis-server
    - git
    - python-psycopg2
    - jq
 
- name: get the package facts
  package_facts:
  register: mypackages
  tags: mypack

- name: Is version ok ?
  fail: 
    msg: "The version of {{ item.name }} is {{ item.version }} which is before {{ item.limit }}"
  when: item.version | int < item.limit | int
  with_items:
    - name: g++
      version: "{{ mypackages.ansible_facts.packages['g++'][0].version | regex_replace('.*:([0-9])([0-9\\.]+).*','\\1') }}"
      limit: 5
    - name: ffmpeg
      version: "{{ mypackages.ansible_facts.packages['ffmpeg'][0].version | regex_replace('.*:([0-9])([0-9\\.]+).*','\\1') }}"
      limit: 3
  tags: mypack

- name: create required directories
  file:
    state: directory
    path: "{{ app_user_home }}/{{ item }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  with_items: "{{ special_directories }}"

- name: set up postgres DB
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ app_pg_db }}"
    login_user: postgres
  tags: pg

- name: set up postgres User
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ app_pg_user }}"
    password: "{{ app_pg_user_password }}"
    db: "{{ app_pg_db }}"
    login_user: postgres
  tags: pg


- name: determine latest version
  tags: unzip
  shell: curl -s "{{ peer_version_url }}" | jq .tag_name 
    warn: False
  register: last_version
  when: peer_version is not defined or peer_version is none

- name: set version variable
  tags: unzip
  set_fact:
    peer_version: '{{ last_version.stdout }}'
  when: peer_version is not defined or peer_version is none

- name: Debug version variable
  tags: unzip
  debug:
    var: peer_version

## As per install doc, we have to use some gymnastic with zip file
- name: download and extract archive
  tags: unzip
  unarchive:
    creates: "{{ app_user_home }}/versions/peertube-{{ peer_version }}"
    dest: "{{ app_user_home }}/versions/"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    remote_src: yes
    src: "{{ peer_src_url }}"
    
- name: create link to latest
  file:
    state: link
    src: "{{ app_user_home }}/versions/peertube-{{ peer_version }}"
    dest: "{{ app_user_home }}/peertube-latest"

- name: ensure all belongs to {{ app_user }}
  file:
    state: directory 
    recurse: yes
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    follow: yes
    path: "{{ app_user_home }}/peertube-latest"

- name: install peertube
  become: true
  become_user: "{{ app_user }}"
  shell: cd "{{ app_user_home }}/peertube-latest" && yarn install --production --pure-lockfile

- name: Installation is finished, configuration is left to the user
  pause:
    prompt: |2
        Installation complete!

        Please not that 'certbot' was NOT installed (not required if you are using a reverse proxy for your web apps).

        Next is to set up a minimum working configuration..."
  tags: info
