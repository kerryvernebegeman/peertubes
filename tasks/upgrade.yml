---

- name: Fetch package.json file
  fetch:
    dest: remote
    src: "{{directory_latest }}/package.json"

- name: Get version
  include_vars:
    file: "remote/{{ inventory_hostname }}/{{directory_latest }}/package.json"
    name: peertube_package

- name: determine latest version
  shell: curl -s "{{ peer_version_url }}" | jq -r .tag_name 
  args:
    warn: no
  register: last_version

- name: set last version variable
  set_fact:
    peer_version: '{{ last_version.stdout | regex_replace( "v(.*)","\1")  }}'

- name: Same Version
  pause:
    seconds: 1
    prompt: |
      .
      .
      .
      . You're version - {{ peertube_package.version }}
      . Last version   - {{ peer_version }}
      .
      . Nothing to do...
      .
  when: peertube_package.version == peer_version

- name: Stop
  meta: end_play
  when: peertube_package.version == peer_version

- name: Ask user for upgrade
  pause:
    prompt: |
      .
      .
      .
      . You're version - {{ peertube_package.version }}
      . Last version   - {{ peer_version }}
      .
      . Do you want to continue to upgrade ? (y/n)
      .
  register: user_choice
  when: peertube_package.version != peer_version

- name: Stop
  meta: end_play
  when: user_choice.stdout not in ["y","Y"]

- name: Stop Peertube service
  systemd:
    name: "{{ peertube_service_name }}"
    state: stopped

- name: Backup database
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ app_pg_db }}"
    state: dump
    target: '{{ directory_storage }}/backup/pg_ansible_upgrade_{{ peertube_package.version }}_to_{{ peer_version }}'
    login_user: postgres

- name: Execute Upgrade
  shell: upgrade.sh
  args:
    chdir: '{{ directory_latest }}/scripts'
  register: upgrade_results


- name: Pause
  pause:
    prompt: Pause, Everything Ok ?

